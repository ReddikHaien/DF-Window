// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ItemDefInstrument.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ItemdefInstrument {

  /// <summary>Holder for reflection information generated from ItemDefInstrument.proto</summary>
  public static partial class ItemDefInstrumentReflection {

    #region Descriptor
    /// <summary>File descriptor for ItemDefInstrument.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ItemDefInstrumentReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdJdGVtRGVmSW5zdHJ1bWVudC5wcm90bxIRSXRlbWRlZkluc3RydW1lbnQi",
            "zAEKD0luc3RydW1lbnRGbGFncxIYChBpbmRlZmluaXRlX3BpdGNoGAEgASgI",
            "EhoKEnBsYWNlZF9hc19idWlsZGluZxgCIAEoCBIRCgltZXRhbF9tYXQYAyAB",
            "KAgSEQoJc3RvbmVfbWF0GAQgASgIEhAKCHdvb2RfbWF0GAUgASgIEhEKCWds",
            "YXNzX21hdBgGIAEoCBITCgtjZXJhbWljX21hdBgHIAEoCBIRCglzaGVsbF9t",
            "YXQYCCABKAgSEAoIYm9uZV9tYXQYCSABKAgiTgoPSW5zdHJ1bWVudFBpZWNl",
            "EgwKBHR5cGUYASABKAwSCgoCaWQYAiABKAwSDAoEbmFtZRgDIAEoDBITCgtu",
            "YW1lX3BsdXJhbBgEIAEoDCJGChJJbnN0cnVtZW50UmVnaXN0ZXISFwoPcGl0",
            "Y2hfcmFuZ2VfbWluGAEgASgFEhcKD3BpdGNoX3JhbmdlX21heBgCIAEoBSKR",
            "BQoNSW5zdHJ1bWVudERlZhIxCgVmbGFncxgBIAEoCzIiLkl0ZW1kZWZJbnN0",
            "cnVtZW50Lkluc3RydW1lbnRGbGFncxIMCgRzaXplGAIgASgFEg0KBXZhbHVl",
            "GAMgASgFEhUKDW1hdGVyaWFsX3NpemUYBCABKAUSMgoGcGllY2VzGAUgAygL",
            "MiIuSXRlbWRlZkluc3RydW1lbnQuSW5zdHJ1bWVudFBpZWNlEhcKD3BpdGNo",
            "X3JhbmdlX21pbhgGIAEoBRIXCg9waXRjaF9yYW5nZV9tYXgYByABKAUSFQoN",
            "dm9sdW1lX21iX21pbhgIIAEoBRIVCg12b2x1bWVfbWJfbWF4GAkgASgFEkAK",
            "EHNvdW5kX3Byb2R1Y3Rpb24YCiADKA4yJi5JdGVtZGVmSW5zdHJ1bWVudC5T",
            "b3VuZFByb2R1Y3Rpb25UeXBlEh4KFnNvdW5kX3Byb2R1Y3Rpb25fcGFybTEY",
            "CyADKAwSHgoWc291bmRfcHJvZHVjdGlvbl9wYXJtMhgMIAMoDBI4CgxwaXRj",
            "aF9jaG9pY2UYDSADKA4yIi5JdGVtZGVmSW5zdHJ1bWVudC5QaXRjaENob2lj",
            "ZVR5cGUSGgoScGl0Y2hfY2hvaWNlX3Bhcm0xGA4gAygMEhoKEnBpdGNoX2No",
            "b2ljZV9wYXJtMhgPIAMoDBItCgZ0dW5pbmcYECADKA4yHS5JdGVtZGVmSW5z",
            "dHJ1bWVudC5UdW5pbmdUeXBlEhMKC3R1bmluZ19wYXJtGBEgAygMEjgKCXJl",
            "Z2lzdGVycxgSIAMoCzIlLkl0ZW1kZWZJbnN0cnVtZW50Lkluc3RydW1lbnRS",
            "ZWdpc3RlchITCgtkZXNjcmlwdGlvbhgTIAEoDCr5AQoPUGl0Y2hDaG9pY2VU",
            "eXBlEhUKEU1FTUJSQU5FX1BPU0lUSU9OEAASEgoOU1VCUEFSVF9DSE9JQ0UQ",
            "ARIMCghLRVlCT0FSRBACEhEKDVNUT1BQSU5HX0ZSRVQQAxIZChVTVE9QUElO",
            "R19BR0FJTlNUX0JPRFkQBBIRCg1TVE9QUElOR19IT0xFEAUSFQoRU1RPUFBJ",
            "TkdfSE9MRV9LRVkQBhIJCgVTTElERRAHEhMKD0hBUk1PTklDX1NFUklFUxAI",
            "EhQKEFZBTFZFX1JPVVRFU19BSVIQCRIOCgpCUF9JTl9CRUxMEAoSDwoLRk9P",
            "VF9QRURBTFMQCyq+AwoTU291bmRQcm9kdWN0aW9uVHlwZRIRCg1QTFVDS0VE",
            "X0JZX0JQEAASCwoHUExVQ0tFRBABEgkKBUJPV0VEEAISEAoMU1RSVUNLX0JZ",
            "X0JQEAMSCgoGU1RSVUNLEAQSHgoaVklCUkFURV9CUF9BR0FJTlNUX09QRU5J",
            "TkcQBRIXChNCTE9XX0FHQUlOU1RfRklQUExFEAYSGgoWQkxPV19PVkVSX09Q",
            "RU5JTkdfU0lERRAHEhkKFUJMT1dfT1ZFUl9PUEVOSU5HX0VORBAIEhkKFUJM",
            "T1dfT1ZFUl9TSU5HTEVfUkVFRBAJEhkKFUJMT1dfT1ZFUl9ET1VCTEVfUkVF",
            "RBAKEhcKE0JMT1dfT1ZFUl9GUkVFX1JFRUQQCxITCg9TVFJVQ0tfVE9HRVRI",
            "RVIQDBIKCgZTSEFLRU4QDRILCgdTQ1JBUEVEEA4SDAoIRlJJQ1RJT04QDxIN",
            "CglSRVNPTkFUT1IQEBIRCg1CQUdfT1ZFUl9SRUVEEBESEQoNQUlSX09WRVJf",
            "UkVFRBASEhYKEkFJUl9PVkVSX0ZSRUVfUkVFRBATEhYKEkFJUl9BR0FJTlNU",
            "X0ZJUFBMRRAUKlYKClR1bmluZ1R5cGUSCAoEUEVHUxAAEhYKEkFESlVTVEFC",
            "TEVfQlJJREdFUxABEgoKBkNST09LUxACEg4KClRJR0hURU5JTkcQAxIKCgZM",
            "RVZFUlMQBEICSAM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ItemdefInstrument.PitchChoiceType), typeof(global::ItemdefInstrument.SoundProductionType), typeof(global::ItemdefInstrument.TuningType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ItemdefInstrument.InstrumentFlags), global::ItemdefInstrument.InstrumentFlags.Parser, new[]{ "IndefinitePitch", "PlacedAsBuilding", "MetalMat", "StoneMat", "WoodMat", "GlassMat", "CeramicMat", "ShellMat", "BoneMat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ItemdefInstrument.InstrumentPiece), global::ItemdefInstrument.InstrumentPiece.Parser, new[]{ "Type", "Id", "Name", "NamePlural" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ItemdefInstrument.InstrumentRegister), global::ItemdefInstrument.InstrumentRegister.Parser, new[]{ "PitchRangeMin", "PitchRangeMax" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ItemdefInstrument.InstrumentDef), global::ItemdefInstrument.InstrumentDef.Parser, new[]{ "Flags", "Size", "Value", "MaterialSize", "Pieces", "PitchRangeMin", "PitchRangeMax", "VolumeMbMin", "VolumeMbMax", "SoundProduction", "SoundProductionParm1", "SoundProductionParm2", "PitchChoice", "PitchChoiceParm1", "PitchChoiceParm2", "Tuning", "TuningParm", "Registers", "Description" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PitchChoiceType {
    [pbr::OriginalName("MEMBRANE_POSITION")] MembranePosition = 0,
    [pbr::OriginalName("SUBPART_CHOICE")] SubpartChoice = 1,
    [pbr::OriginalName("KEYBOARD")] Keyboard = 2,
    [pbr::OriginalName("STOPPING_FRET")] StoppingFret = 3,
    [pbr::OriginalName("STOPPING_AGAINST_BODY")] StoppingAgainstBody = 4,
    [pbr::OriginalName("STOPPING_HOLE")] StoppingHole = 5,
    [pbr::OriginalName("STOPPING_HOLE_KEY")] StoppingHoleKey = 6,
    [pbr::OriginalName("SLIDE")] Slide = 7,
    [pbr::OriginalName("HARMONIC_SERIES")] HarmonicSeries = 8,
    [pbr::OriginalName("VALVE_ROUTES_AIR")] ValveRoutesAir = 9,
    [pbr::OriginalName("BP_IN_BELL")] BpInBell = 10,
    [pbr::OriginalName("FOOT_PEDALS")] FootPedals = 11,
  }

  public enum SoundProductionType {
    [pbr::OriginalName("PLUCKED_BY_BP")] PluckedByBp = 0,
    [pbr::OriginalName("PLUCKED")] Plucked = 1,
    [pbr::OriginalName("BOWED")] Bowed = 2,
    [pbr::OriginalName("STRUCK_BY_BP")] StruckByBp = 3,
    [pbr::OriginalName("STRUCK")] Struck = 4,
    [pbr::OriginalName("VIBRATE_BP_AGAINST_OPENING")] VibrateBpAgainstOpening = 5,
    [pbr::OriginalName("BLOW_AGAINST_FIPPLE")] BlowAgainstFipple = 6,
    [pbr::OriginalName("BLOW_OVER_OPENING_SIDE")] BlowOverOpeningSide = 7,
    [pbr::OriginalName("BLOW_OVER_OPENING_END")] BlowOverOpeningEnd = 8,
    [pbr::OriginalName("BLOW_OVER_SINGLE_REED")] BlowOverSingleReed = 9,
    [pbr::OriginalName("BLOW_OVER_DOUBLE_REED")] BlowOverDoubleReed = 10,
    [pbr::OriginalName("BLOW_OVER_FREE_REED")] BlowOverFreeReed = 11,
    [pbr::OriginalName("STRUCK_TOGETHER")] StruckTogether = 12,
    [pbr::OriginalName("SHAKEN")] Shaken = 13,
    [pbr::OriginalName("SCRAPED")] Scraped = 14,
    [pbr::OriginalName("FRICTION")] Friction = 15,
    [pbr::OriginalName("RESONATOR")] Resonator = 16,
    [pbr::OriginalName("BAG_OVER_REED")] BagOverReed = 17,
    [pbr::OriginalName("AIR_OVER_REED")] AirOverReed = 18,
    [pbr::OriginalName("AIR_OVER_FREE_REED")] AirOverFreeReed = 19,
    [pbr::OriginalName("AIR_AGAINST_FIPPLE")] AirAgainstFipple = 20,
  }

  public enum TuningType {
    [pbr::OriginalName("PEGS")] Pegs = 0,
    [pbr::OriginalName("ADJUSTABLE_BRIDGES")] AdjustableBridges = 1,
    [pbr::OriginalName("CROOKS")] Crooks = 2,
    [pbr::OriginalName("TIGHTENING")] Tightening = 3,
    [pbr::OriginalName("LEVERS")] Levers = 4,
  }

  #endregion

  #region Messages
  public sealed partial class InstrumentFlags : pb::IMessage<InstrumentFlags>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentFlags> _parser = new pb::MessageParser<InstrumentFlags>(() => new InstrumentFlags());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentFlags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ItemdefInstrument.ItemDefInstrumentReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentFlags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentFlags(InstrumentFlags other) : this() {
      _hasBits0 = other._hasBits0;
      indefinitePitch_ = other.indefinitePitch_;
      placedAsBuilding_ = other.placedAsBuilding_;
      metalMat_ = other.metalMat_;
      stoneMat_ = other.stoneMat_;
      woodMat_ = other.woodMat_;
      glassMat_ = other.glassMat_;
      ceramicMat_ = other.ceramicMat_;
      shellMat_ = other.shellMat_;
      boneMat_ = other.boneMat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentFlags Clone() {
      return new InstrumentFlags(this);
    }

    /// <summary>Field number for the "indefinite_pitch" field.</summary>
    public const int IndefinitePitchFieldNumber = 1;
    private readonly static bool IndefinitePitchDefaultValue = false;

    private bool indefinitePitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IndefinitePitch {
      get { if ((_hasBits0 & 1) != 0) { return indefinitePitch_; } else { return IndefinitePitchDefaultValue; } }
      set {
        _hasBits0 |= 1;
        indefinitePitch_ = value;
      }
    }
    /// <summary>Gets whether the "indefinite_pitch" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIndefinitePitch {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "indefinite_pitch" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIndefinitePitch() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "placed_as_building" field.</summary>
    public const int PlacedAsBuildingFieldNumber = 2;
    private readonly static bool PlacedAsBuildingDefaultValue = false;

    private bool placedAsBuilding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PlacedAsBuilding {
      get { if ((_hasBits0 & 2) != 0) { return placedAsBuilding_; } else { return PlacedAsBuildingDefaultValue; } }
      set {
        _hasBits0 |= 2;
        placedAsBuilding_ = value;
      }
    }
    /// <summary>Gets whether the "placed_as_building" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlacedAsBuilding {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "placed_as_building" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlacedAsBuilding() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "metal_mat" field.</summary>
    public const int MetalMatFieldNumber = 3;
    private readonly static bool MetalMatDefaultValue = false;

    private bool metalMat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MetalMat {
      get { if ((_hasBits0 & 4) != 0) { return metalMat_; } else { return MetalMatDefaultValue; } }
      set {
        _hasBits0 |= 4;
        metalMat_ = value;
      }
    }
    /// <summary>Gets whether the "metal_mat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMetalMat {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "metal_mat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMetalMat() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "stone_mat" field.</summary>
    public const int StoneMatFieldNumber = 4;
    private readonly static bool StoneMatDefaultValue = false;

    private bool stoneMat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool StoneMat {
      get { if ((_hasBits0 & 8) != 0) { return stoneMat_; } else { return StoneMatDefaultValue; } }
      set {
        _hasBits0 |= 8;
        stoneMat_ = value;
      }
    }
    /// <summary>Gets whether the "stone_mat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStoneMat {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "stone_mat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStoneMat() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "wood_mat" field.</summary>
    public const int WoodMatFieldNumber = 5;
    private readonly static bool WoodMatDefaultValue = false;

    private bool woodMat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WoodMat {
      get { if ((_hasBits0 & 16) != 0) { return woodMat_; } else { return WoodMatDefaultValue; } }
      set {
        _hasBits0 |= 16;
        woodMat_ = value;
      }
    }
    /// <summary>Gets whether the "wood_mat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWoodMat {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "wood_mat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWoodMat() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "glass_mat" field.</summary>
    public const int GlassMatFieldNumber = 6;
    private readonly static bool GlassMatDefaultValue = false;

    private bool glassMat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GlassMat {
      get { if ((_hasBits0 & 32) != 0) { return glassMat_; } else { return GlassMatDefaultValue; } }
      set {
        _hasBits0 |= 32;
        glassMat_ = value;
      }
    }
    /// <summary>Gets whether the "glass_mat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGlassMat {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "glass_mat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGlassMat() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "ceramic_mat" field.</summary>
    public const int CeramicMatFieldNumber = 7;
    private readonly static bool CeramicMatDefaultValue = false;

    private bool ceramicMat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CeramicMat {
      get { if ((_hasBits0 & 64) != 0) { return ceramicMat_; } else { return CeramicMatDefaultValue; } }
      set {
        _hasBits0 |= 64;
        ceramicMat_ = value;
      }
    }
    /// <summary>Gets whether the "ceramic_mat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCeramicMat {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "ceramic_mat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCeramicMat() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "shell_mat" field.</summary>
    public const int ShellMatFieldNumber = 8;
    private readonly static bool ShellMatDefaultValue = false;

    private bool shellMat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ShellMat {
      get { if ((_hasBits0 & 128) != 0) { return shellMat_; } else { return ShellMatDefaultValue; } }
      set {
        _hasBits0 |= 128;
        shellMat_ = value;
      }
    }
    /// <summary>Gets whether the "shell_mat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShellMat {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "shell_mat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShellMat() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "bone_mat" field.</summary>
    public const int BoneMatFieldNumber = 9;
    private readonly static bool BoneMatDefaultValue = false;

    private bool boneMat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BoneMat {
      get { if ((_hasBits0 & 256) != 0) { return boneMat_; } else { return BoneMatDefaultValue; } }
      set {
        _hasBits0 |= 256;
        boneMat_ = value;
      }
    }
    /// <summary>Gets whether the "bone_mat" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBoneMat {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "bone_mat" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBoneMat() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentFlags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentFlags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IndefinitePitch != other.IndefinitePitch) return false;
      if (PlacedAsBuilding != other.PlacedAsBuilding) return false;
      if (MetalMat != other.MetalMat) return false;
      if (StoneMat != other.StoneMat) return false;
      if (WoodMat != other.WoodMat) return false;
      if (GlassMat != other.GlassMat) return false;
      if (CeramicMat != other.CeramicMat) return false;
      if (ShellMat != other.ShellMat) return false;
      if (BoneMat != other.BoneMat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasIndefinitePitch) hash ^= IndefinitePitch.GetHashCode();
      if (HasPlacedAsBuilding) hash ^= PlacedAsBuilding.GetHashCode();
      if (HasMetalMat) hash ^= MetalMat.GetHashCode();
      if (HasStoneMat) hash ^= StoneMat.GetHashCode();
      if (HasWoodMat) hash ^= WoodMat.GetHashCode();
      if (HasGlassMat) hash ^= GlassMat.GetHashCode();
      if (HasCeramicMat) hash ^= CeramicMat.GetHashCode();
      if (HasShellMat) hash ^= ShellMat.GetHashCode();
      if (HasBoneMat) hash ^= BoneMat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasIndefinitePitch) {
        output.WriteRawTag(8);
        output.WriteBool(IndefinitePitch);
      }
      if (HasPlacedAsBuilding) {
        output.WriteRawTag(16);
        output.WriteBool(PlacedAsBuilding);
      }
      if (HasMetalMat) {
        output.WriteRawTag(24);
        output.WriteBool(MetalMat);
      }
      if (HasStoneMat) {
        output.WriteRawTag(32);
        output.WriteBool(StoneMat);
      }
      if (HasWoodMat) {
        output.WriteRawTag(40);
        output.WriteBool(WoodMat);
      }
      if (HasGlassMat) {
        output.WriteRawTag(48);
        output.WriteBool(GlassMat);
      }
      if (HasCeramicMat) {
        output.WriteRawTag(56);
        output.WriteBool(CeramicMat);
      }
      if (HasShellMat) {
        output.WriteRawTag(64);
        output.WriteBool(ShellMat);
      }
      if (HasBoneMat) {
        output.WriteRawTag(72);
        output.WriteBool(BoneMat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasIndefinitePitch) {
        output.WriteRawTag(8);
        output.WriteBool(IndefinitePitch);
      }
      if (HasPlacedAsBuilding) {
        output.WriteRawTag(16);
        output.WriteBool(PlacedAsBuilding);
      }
      if (HasMetalMat) {
        output.WriteRawTag(24);
        output.WriteBool(MetalMat);
      }
      if (HasStoneMat) {
        output.WriteRawTag(32);
        output.WriteBool(StoneMat);
      }
      if (HasWoodMat) {
        output.WriteRawTag(40);
        output.WriteBool(WoodMat);
      }
      if (HasGlassMat) {
        output.WriteRawTag(48);
        output.WriteBool(GlassMat);
      }
      if (HasCeramicMat) {
        output.WriteRawTag(56);
        output.WriteBool(CeramicMat);
      }
      if (HasShellMat) {
        output.WriteRawTag(64);
        output.WriteBool(ShellMat);
      }
      if (HasBoneMat) {
        output.WriteRawTag(72);
        output.WriteBool(BoneMat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasIndefinitePitch) {
        size += 1 + 1;
      }
      if (HasPlacedAsBuilding) {
        size += 1 + 1;
      }
      if (HasMetalMat) {
        size += 1 + 1;
      }
      if (HasStoneMat) {
        size += 1 + 1;
      }
      if (HasWoodMat) {
        size += 1 + 1;
      }
      if (HasGlassMat) {
        size += 1 + 1;
      }
      if (HasCeramicMat) {
        size += 1 + 1;
      }
      if (HasShellMat) {
        size += 1 + 1;
      }
      if (HasBoneMat) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentFlags other) {
      if (other == null) {
        return;
      }
      if (other.HasIndefinitePitch) {
        IndefinitePitch = other.IndefinitePitch;
      }
      if (other.HasPlacedAsBuilding) {
        PlacedAsBuilding = other.PlacedAsBuilding;
      }
      if (other.HasMetalMat) {
        MetalMat = other.MetalMat;
      }
      if (other.HasStoneMat) {
        StoneMat = other.StoneMat;
      }
      if (other.HasWoodMat) {
        WoodMat = other.WoodMat;
      }
      if (other.HasGlassMat) {
        GlassMat = other.GlassMat;
      }
      if (other.HasCeramicMat) {
        CeramicMat = other.CeramicMat;
      }
      if (other.HasShellMat) {
        ShellMat = other.ShellMat;
      }
      if (other.HasBoneMat) {
        BoneMat = other.BoneMat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IndefinitePitch = input.ReadBool();
            break;
          }
          case 16: {
            PlacedAsBuilding = input.ReadBool();
            break;
          }
          case 24: {
            MetalMat = input.ReadBool();
            break;
          }
          case 32: {
            StoneMat = input.ReadBool();
            break;
          }
          case 40: {
            WoodMat = input.ReadBool();
            break;
          }
          case 48: {
            GlassMat = input.ReadBool();
            break;
          }
          case 56: {
            CeramicMat = input.ReadBool();
            break;
          }
          case 64: {
            ShellMat = input.ReadBool();
            break;
          }
          case 72: {
            BoneMat = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IndefinitePitch = input.ReadBool();
            break;
          }
          case 16: {
            PlacedAsBuilding = input.ReadBool();
            break;
          }
          case 24: {
            MetalMat = input.ReadBool();
            break;
          }
          case 32: {
            StoneMat = input.ReadBool();
            break;
          }
          case 40: {
            WoodMat = input.ReadBool();
            break;
          }
          case 48: {
            GlassMat = input.ReadBool();
            break;
          }
          case 56: {
            CeramicMat = input.ReadBool();
            break;
          }
          case 64: {
            ShellMat = input.ReadBool();
            break;
          }
          case 72: {
            BoneMat = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InstrumentPiece : pb::IMessage<InstrumentPiece>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentPiece> _parser = new pb::MessageParser<InstrumentPiece>(() => new InstrumentPiece());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentPiece> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ItemdefInstrument.ItemDefInstrumentReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentPiece() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentPiece(InstrumentPiece other) : this() {
      type_ = other.type_;
      id_ = other.id_;
      name_ = other.name_;
      namePlural_ = other.namePlural_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentPiece Clone() {
      return new InstrumentPiece(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private readonly static pb::ByteString TypeDefaultValue = pb::ByteString.Empty;

    private pb::ByteString type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static pb::ByteString IdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static pb::ByteString NameDefaultValue = pb::ByteString.Empty;

    private pb::ByteString name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "name_plural" field.</summary>
    public const int NamePluralFieldNumber = 4;
    private readonly static pb::ByteString NamePluralDefaultValue = pb::ByteString.Empty;

    private pb::ByteString namePlural_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString NamePlural {
      get { return namePlural_ ?? NamePluralDefaultValue; }
      set {
        namePlural_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name_plural" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNamePlural {
      get { return namePlural_ != null; }
    }
    /// <summary>Clears the value of the "name_plural" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNamePlural() {
      namePlural_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentPiece);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentPiece other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (NamePlural != other.NamePlural) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasType) hash ^= Type.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasNamePlural) hash ^= NamePlural.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteBytes(Type);
      }
      if (HasId) {
        output.WriteRawTag(18);
        output.WriteBytes(Id);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (HasNamePlural) {
        output.WriteRawTag(34);
        output.WriteBytes(NamePlural);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasType) {
        output.WriteRawTag(10);
        output.WriteBytes(Type);
      }
      if (HasId) {
        output.WriteRawTag(18);
        output.WriteBytes(Id);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (HasNamePlural) {
        output.WriteRawTag(34);
        output.WriteBytes(NamePlural);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Type);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (HasNamePlural) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NamePlural);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentPiece other) {
      if (other == null) {
        return;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasNamePlural) {
        NamePlural = other.NamePlural;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadBytes();
            break;
          }
          case 18: {
            Id = input.ReadBytes();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
          case 34: {
            NamePlural = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadBytes();
            break;
          }
          case 18: {
            Id = input.ReadBytes();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
          case 34: {
            NamePlural = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InstrumentRegister : pb::IMessage<InstrumentRegister>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentRegister> _parser = new pb::MessageParser<InstrumentRegister>(() => new InstrumentRegister());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentRegister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ItemdefInstrument.ItemDefInstrumentReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRegister(InstrumentRegister other) : this() {
      _hasBits0 = other._hasBits0;
      pitchRangeMin_ = other.pitchRangeMin_;
      pitchRangeMax_ = other.pitchRangeMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentRegister Clone() {
      return new InstrumentRegister(this);
    }

    /// <summary>Field number for the "pitch_range_min" field.</summary>
    public const int PitchRangeMinFieldNumber = 1;
    private readonly static int PitchRangeMinDefaultValue = 0;

    private int pitchRangeMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PitchRangeMin {
      get { if ((_hasBits0 & 1) != 0) { return pitchRangeMin_; } else { return PitchRangeMinDefaultValue; } }
      set {
        _hasBits0 |= 1;
        pitchRangeMin_ = value;
      }
    }
    /// <summary>Gets whether the "pitch_range_min" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPitchRangeMin {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "pitch_range_min" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPitchRangeMin() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "pitch_range_max" field.</summary>
    public const int PitchRangeMaxFieldNumber = 2;
    private readonly static int PitchRangeMaxDefaultValue = 0;

    private int pitchRangeMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PitchRangeMax {
      get { if ((_hasBits0 & 2) != 0) { return pitchRangeMax_; } else { return PitchRangeMaxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        pitchRangeMax_ = value;
      }
    }
    /// <summary>Gets whether the "pitch_range_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPitchRangeMax {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "pitch_range_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPitchRangeMax() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentRegister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PitchRangeMin != other.PitchRangeMin) return false;
      if (PitchRangeMax != other.PitchRangeMax) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPitchRangeMin) hash ^= PitchRangeMin.GetHashCode();
      if (HasPitchRangeMax) hash ^= PitchRangeMax.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPitchRangeMin) {
        output.WriteRawTag(8);
        output.WriteInt32(PitchRangeMin);
      }
      if (HasPitchRangeMax) {
        output.WriteRawTag(16);
        output.WriteInt32(PitchRangeMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPitchRangeMin) {
        output.WriteRawTag(8);
        output.WriteInt32(PitchRangeMin);
      }
      if (HasPitchRangeMax) {
        output.WriteRawTag(16);
        output.WriteInt32(PitchRangeMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPitchRangeMin) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PitchRangeMin);
      }
      if (HasPitchRangeMax) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PitchRangeMax);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentRegister other) {
      if (other == null) {
        return;
      }
      if (other.HasPitchRangeMin) {
        PitchRangeMin = other.PitchRangeMin;
      }
      if (other.HasPitchRangeMax) {
        PitchRangeMax = other.PitchRangeMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PitchRangeMin = input.ReadInt32();
            break;
          }
          case 16: {
            PitchRangeMax = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PitchRangeMin = input.ReadInt32();
            break;
          }
          case 16: {
            PitchRangeMax = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InstrumentDef : pb::IMessage<InstrumentDef>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InstrumentDef> _parser = new pb::MessageParser<InstrumentDef>(() => new InstrumentDef());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InstrumentDef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ItemdefInstrument.ItemDefInstrumentReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDef(InstrumentDef other) : this() {
      _hasBits0 = other._hasBits0;
      flags_ = other.flags_ != null ? other.flags_.Clone() : null;
      size_ = other.size_;
      value_ = other.value_;
      materialSize_ = other.materialSize_;
      pieces_ = other.pieces_.Clone();
      pitchRangeMin_ = other.pitchRangeMin_;
      pitchRangeMax_ = other.pitchRangeMax_;
      volumeMbMin_ = other.volumeMbMin_;
      volumeMbMax_ = other.volumeMbMax_;
      soundProduction_ = other.soundProduction_.Clone();
      soundProductionParm1_ = other.soundProductionParm1_.Clone();
      soundProductionParm2_ = other.soundProductionParm2_.Clone();
      pitchChoice_ = other.pitchChoice_.Clone();
      pitchChoiceParm1_ = other.pitchChoiceParm1_.Clone();
      pitchChoiceParm2_ = other.pitchChoiceParm2_.Clone();
      tuning_ = other.tuning_.Clone();
      tuningParm_ = other.tuningParm_.Clone();
      registers_ = other.registers_.Clone();
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InstrumentDef Clone() {
      return new InstrumentDef(this);
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 1;
    private global::ItemdefInstrument.InstrumentFlags flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ItemdefInstrument.InstrumentFlags Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private readonly static int SizeDefaultValue = 0;

    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Size {
      get { if ((_hasBits0 & 1) != 0) { return size_; } else { return SizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        size_ = value;
      }
    }
    /// <summary>Gets whether the "size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private readonly static int ValueDefaultValue = 0;

    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Value {
      get { if ((_hasBits0 & 2) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "material_size" field.</summary>
    public const int MaterialSizeFieldNumber = 4;
    private readonly static int MaterialSizeDefaultValue = 0;

    private int materialSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaterialSize {
      get { if ((_hasBits0 & 4) != 0) { return materialSize_; } else { return MaterialSizeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        materialSize_ = value;
      }
    }
    /// <summary>Gets whether the "material_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaterialSize {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "material_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaterialSize() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "pieces" field.</summary>
    public const int PiecesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::ItemdefInstrument.InstrumentPiece> _repeated_pieces_codec
        = pb::FieldCodec.ForMessage(42, global::ItemdefInstrument.InstrumentPiece.Parser);
    private readonly pbc::RepeatedField<global::ItemdefInstrument.InstrumentPiece> pieces_ = new pbc::RepeatedField<global::ItemdefInstrument.InstrumentPiece>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::ItemdefInstrument.InstrumentPiece> Pieces {
      get { return pieces_; }
    }

    /// <summary>Field number for the "pitch_range_min" field.</summary>
    public const int PitchRangeMinFieldNumber = 6;
    private readonly static int PitchRangeMinDefaultValue = 0;

    private int pitchRangeMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PitchRangeMin {
      get { if ((_hasBits0 & 8) != 0) { return pitchRangeMin_; } else { return PitchRangeMinDefaultValue; } }
      set {
        _hasBits0 |= 8;
        pitchRangeMin_ = value;
      }
    }
    /// <summary>Gets whether the "pitch_range_min" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPitchRangeMin {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "pitch_range_min" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPitchRangeMin() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "pitch_range_max" field.</summary>
    public const int PitchRangeMaxFieldNumber = 7;
    private readonly static int PitchRangeMaxDefaultValue = 0;

    private int pitchRangeMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PitchRangeMax {
      get { if ((_hasBits0 & 16) != 0) { return pitchRangeMax_; } else { return PitchRangeMaxDefaultValue; } }
      set {
        _hasBits0 |= 16;
        pitchRangeMax_ = value;
      }
    }
    /// <summary>Gets whether the "pitch_range_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPitchRangeMax {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "pitch_range_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPitchRangeMax() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "volume_mb_min" field.</summary>
    public const int VolumeMbMinFieldNumber = 8;
    private readonly static int VolumeMbMinDefaultValue = 0;

    private int volumeMbMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VolumeMbMin {
      get { if ((_hasBits0 & 32) != 0) { return volumeMbMin_; } else { return VolumeMbMinDefaultValue; } }
      set {
        _hasBits0 |= 32;
        volumeMbMin_ = value;
      }
    }
    /// <summary>Gets whether the "volume_mb_min" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolumeMbMin {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "volume_mb_min" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolumeMbMin() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "volume_mb_max" field.</summary>
    public const int VolumeMbMaxFieldNumber = 9;
    private readonly static int VolumeMbMaxDefaultValue = 0;

    private int volumeMbMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VolumeMbMax {
      get { if ((_hasBits0 & 64) != 0) { return volumeMbMax_; } else { return VolumeMbMaxDefaultValue; } }
      set {
        _hasBits0 |= 64;
        volumeMbMax_ = value;
      }
    }
    /// <summary>Gets whether the "volume_mb_max" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVolumeMbMax {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "volume_mb_max" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVolumeMbMax() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "sound_production" field.</summary>
    public const int SoundProductionFieldNumber = 10;
    private static readonly pb::FieldCodec<global::ItemdefInstrument.SoundProductionType> _repeated_soundProduction_codec
        = pb::FieldCodec.ForEnum(80, x => (int) x, x => (global::ItemdefInstrument.SoundProductionType) x);
    private readonly pbc::RepeatedField<global::ItemdefInstrument.SoundProductionType> soundProduction_ = new pbc::RepeatedField<global::ItemdefInstrument.SoundProductionType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::ItemdefInstrument.SoundProductionType> SoundProduction {
      get { return soundProduction_; }
    }

    /// <summary>Field number for the "sound_production_parm1" field.</summary>
    public const int SoundProductionParm1FieldNumber = 11;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_soundProductionParm1_codec
        = pb::FieldCodec.ForBytes(90);
    private readonly pbc::RepeatedField<pb::ByteString> soundProductionParm1_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> SoundProductionParm1 {
      get { return soundProductionParm1_; }
    }

    /// <summary>Field number for the "sound_production_parm2" field.</summary>
    public const int SoundProductionParm2FieldNumber = 12;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_soundProductionParm2_codec
        = pb::FieldCodec.ForBytes(98);
    private readonly pbc::RepeatedField<pb::ByteString> soundProductionParm2_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> SoundProductionParm2 {
      get { return soundProductionParm2_; }
    }

    /// <summary>Field number for the "pitch_choice" field.</summary>
    public const int PitchChoiceFieldNumber = 13;
    private static readonly pb::FieldCodec<global::ItemdefInstrument.PitchChoiceType> _repeated_pitchChoice_codec
        = pb::FieldCodec.ForEnum(104, x => (int) x, x => (global::ItemdefInstrument.PitchChoiceType) x);
    private readonly pbc::RepeatedField<global::ItemdefInstrument.PitchChoiceType> pitchChoice_ = new pbc::RepeatedField<global::ItemdefInstrument.PitchChoiceType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::ItemdefInstrument.PitchChoiceType> PitchChoice {
      get { return pitchChoice_; }
    }

    /// <summary>Field number for the "pitch_choice_parm1" field.</summary>
    public const int PitchChoiceParm1FieldNumber = 14;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_pitchChoiceParm1_codec
        = pb::FieldCodec.ForBytes(114);
    private readonly pbc::RepeatedField<pb::ByteString> pitchChoiceParm1_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> PitchChoiceParm1 {
      get { return pitchChoiceParm1_; }
    }

    /// <summary>Field number for the "pitch_choice_parm2" field.</summary>
    public const int PitchChoiceParm2FieldNumber = 15;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_pitchChoiceParm2_codec
        = pb::FieldCodec.ForBytes(122);
    private readonly pbc::RepeatedField<pb::ByteString> pitchChoiceParm2_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> PitchChoiceParm2 {
      get { return pitchChoiceParm2_; }
    }

    /// <summary>Field number for the "tuning" field.</summary>
    public const int TuningFieldNumber = 16;
    private static readonly pb::FieldCodec<global::ItemdefInstrument.TuningType> _repeated_tuning_codec
        = pb::FieldCodec.ForEnum(128, x => (int) x, x => (global::ItemdefInstrument.TuningType) x);
    private readonly pbc::RepeatedField<global::ItemdefInstrument.TuningType> tuning_ = new pbc::RepeatedField<global::ItemdefInstrument.TuningType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::ItemdefInstrument.TuningType> Tuning {
      get { return tuning_; }
    }

    /// <summary>Field number for the "tuning_parm" field.</summary>
    public const int TuningParmFieldNumber = 17;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_tuningParm_codec
        = pb::FieldCodec.ForBytes(138);
    private readonly pbc::RepeatedField<pb::ByteString> tuningParm_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<pb::ByteString> TuningParm {
      get { return tuningParm_; }
    }

    /// <summary>Field number for the "registers" field.</summary>
    public const int RegistersFieldNumber = 18;
    private static readonly pb::FieldCodec<global::ItemdefInstrument.InstrumentRegister> _repeated_registers_codec
        = pb::FieldCodec.ForMessage(146, global::ItemdefInstrument.InstrumentRegister.Parser);
    private readonly pbc::RepeatedField<global::ItemdefInstrument.InstrumentRegister> registers_ = new pbc::RepeatedField<global::ItemdefInstrument.InstrumentRegister>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::ItemdefInstrument.InstrumentRegister> Registers {
      get { return registers_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 19;
    private readonly static pb::ByteString DescriptionDefaultValue = pb::ByteString.Empty;

    private pb::ByteString description_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InstrumentDef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InstrumentDef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Flags, other.Flags)) return false;
      if (Size != other.Size) return false;
      if (Value != other.Value) return false;
      if (MaterialSize != other.MaterialSize) return false;
      if(!pieces_.Equals(other.pieces_)) return false;
      if (PitchRangeMin != other.PitchRangeMin) return false;
      if (PitchRangeMax != other.PitchRangeMax) return false;
      if (VolumeMbMin != other.VolumeMbMin) return false;
      if (VolumeMbMax != other.VolumeMbMax) return false;
      if(!soundProduction_.Equals(other.soundProduction_)) return false;
      if(!soundProductionParm1_.Equals(other.soundProductionParm1_)) return false;
      if(!soundProductionParm2_.Equals(other.soundProductionParm2_)) return false;
      if(!pitchChoice_.Equals(other.pitchChoice_)) return false;
      if(!pitchChoiceParm1_.Equals(other.pitchChoiceParm1_)) return false;
      if(!pitchChoiceParm2_.Equals(other.pitchChoiceParm2_)) return false;
      if(!tuning_.Equals(other.tuning_)) return false;
      if(!tuningParm_.Equals(other.tuningParm_)) return false;
      if(!registers_.Equals(other.registers_)) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (flags_ != null) hash ^= Flags.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (HasValue) hash ^= Value.GetHashCode();
      if (HasMaterialSize) hash ^= MaterialSize.GetHashCode();
      hash ^= pieces_.GetHashCode();
      if (HasPitchRangeMin) hash ^= PitchRangeMin.GetHashCode();
      if (HasPitchRangeMax) hash ^= PitchRangeMax.GetHashCode();
      if (HasVolumeMbMin) hash ^= VolumeMbMin.GetHashCode();
      if (HasVolumeMbMax) hash ^= VolumeMbMax.GetHashCode();
      hash ^= soundProduction_.GetHashCode();
      hash ^= soundProductionParm1_.GetHashCode();
      hash ^= soundProductionParm2_.GetHashCode();
      hash ^= pitchChoice_.GetHashCode();
      hash ^= pitchChoiceParm1_.GetHashCode();
      hash ^= pitchChoiceParm2_.GetHashCode();
      hash ^= tuning_.GetHashCode();
      hash ^= tuningParm_.GetHashCode();
      hash ^= registers_.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (flags_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Flags);
      }
      if (HasSize) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
      if (HasValue) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
      if (HasMaterialSize) {
        output.WriteRawTag(32);
        output.WriteInt32(MaterialSize);
      }
      pieces_.WriteTo(output, _repeated_pieces_codec);
      if (HasPitchRangeMin) {
        output.WriteRawTag(48);
        output.WriteInt32(PitchRangeMin);
      }
      if (HasPitchRangeMax) {
        output.WriteRawTag(56);
        output.WriteInt32(PitchRangeMax);
      }
      if (HasVolumeMbMin) {
        output.WriteRawTag(64);
        output.WriteInt32(VolumeMbMin);
      }
      if (HasVolumeMbMax) {
        output.WriteRawTag(72);
        output.WriteInt32(VolumeMbMax);
      }
      soundProduction_.WriteTo(output, _repeated_soundProduction_codec);
      soundProductionParm1_.WriteTo(output, _repeated_soundProductionParm1_codec);
      soundProductionParm2_.WriteTo(output, _repeated_soundProductionParm2_codec);
      pitchChoice_.WriteTo(output, _repeated_pitchChoice_codec);
      pitchChoiceParm1_.WriteTo(output, _repeated_pitchChoiceParm1_codec);
      pitchChoiceParm2_.WriteTo(output, _repeated_pitchChoiceParm2_codec);
      tuning_.WriteTo(output, _repeated_tuning_codec);
      tuningParm_.WriteTo(output, _repeated_tuningParm_codec);
      registers_.WriteTo(output, _repeated_registers_codec);
      if (HasDescription) {
        output.WriteRawTag(154, 1);
        output.WriteBytes(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (flags_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Flags);
      }
      if (HasSize) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
      if (HasValue) {
        output.WriteRawTag(24);
        output.WriteInt32(Value);
      }
      if (HasMaterialSize) {
        output.WriteRawTag(32);
        output.WriteInt32(MaterialSize);
      }
      pieces_.WriteTo(ref output, _repeated_pieces_codec);
      if (HasPitchRangeMin) {
        output.WriteRawTag(48);
        output.WriteInt32(PitchRangeMin);
      }
      if (HasPitchRangeMax) {
        output.WriteRawTag(56);
        output.WriteInt32(PitchRangeMax);
      }
      if (HasVolumeMbMin) {
        output.WriteRawTag(64);
        output.WriteInt32(VolumeMbMin);
      }
      if (HasVolumeMbMax) {
        output.WriteRawTag(72);
        output.WriteInt32(VolumeMbMax);
      }
      soundProduction_.WriteTo(ref output, _repeated_soundProduction_codec);
      soundProductionParm1_.WriteTo(ref output, _repeated_soundProductionParm1_codec);
      soundProductionParm2_.WriteTo(ref output, _repeated_soundProductionParm2_codec);
      pitchChoice_.WriteTo(ref output, _repeated_pitchChoice_codec);
      pitchChoiceParm1_.WriteTo(ref output, _repeated_pitchChoiceParm1_codec);
      pitchChoiceParm2_.WriteTo(ref output, _repeated_pitchChoiceParm2_codec);
      tuning_.WriteTo(ref output, _repeated_tuning_codec);
      tuningParm_.WriteTo(ref output, _repeated_tuningParm_codec);
      registers_.WriteTo(ref output, _repeated_registers_codec);
      if (HasDescription) {
        output.WriteRawTag(154, 1);
        output.WriteBytes(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (flags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flags);
      }
      if (HasSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (HasValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (HasMaterialSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaterialSize);
      }
      size += pieces_.CalculateSize(_repeated_pieces_codec);
      if (HasPitchRangeMin) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PitchRangeMin);
      }
      if (HasPitchRangeMax) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PitchRangeMax);
      }
      if (HasVolumeMbMin) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VolumeMbMin);
      }
      if (HasVolumeMbMax) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VolumeMbMax);
      }
      size += soundProduction_.CalculateSize(_repeated_soundProduction_codec);
      size += soundProductionParm1_.CalculateSize(_repeated_soundProductionParm1_codec);
      size += soundProductionParm2_.CalculateSize(_repeated_soundProductionParm2_codec);
      size += pitchChoice_.CalculateSize(_repeated_pitchChoice_codec);
      size += pitchChoiceParm1_.CalculateSize(_repeated_pitchChoiceParm1_codec);
      size += pitchChoiceParm2_.CalculateSize(_repeated_pitchChoiceParm2_codec);
      size += tuning_.CalculateSize(_repeated_tuning_codec);
      size += tuningParm_.CalculateSize(_repeated_tuningParm_codec);
      size += registers_.CalculateSize(_repeated_registers_codec);
      if (HasDescription) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InstrumentDef other) {
      if (other == null) {
        return;
      }
      if (other.flags_ != null) {
        if (flags_ == null) {
          Flags = new global::ItemdefInstrument.InstrumentFlags();
        }
        Flags.MergeFrom(other.Flags);
      }
      if (other.HasSize) {
        Size = other.Size;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasMaterialSize) {
        MaterialSize = other.MaterialSize;
      }
      pieces_.Add(other.pieces_);
      if (other.HasPitchRangeMin) {
        PitchRangeMin = other.PitchRangeMin;
      }
      if (other.HasPitchRangeMax) {
        PitchRangeMax = other.PitchRangeMax;
      }
      if (other.HasVolumeMbMin) {
        VolumeMbMin = other.VolumeMbMin;
      }
      if (other.HasVolumeMbMax) {
        VolumeMbMax = other.VolumeMbMax;
      }
      soundProduction_.Add(other.soundProduction_);
      soundProductionParm1_.Add(other.soundProductionParm1_);
      soundProductionParm2_.Add(other.soundProductionParm2_);
      pitchChoice_.Add(other.pitchChoice_);
      pitchChoiceParm1_.Add(other.pitchChoiceParm1_);
      pitchChoiceParm2_.Add(other.pitchChoiceParm2_);
      tuning_.Add(other.tuning_);
      tuningParm_.Add(other.tuningParm_);
      registers_.Add(other.registers_);
      if (other.HasDescription) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (flags_ == null) {
              Flags = new global::ItemdefInstrument.InstrumentFlags();
            }
            input.ReadMessage(Flags);
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
          case 32: {
            MaterialSize = input.ReadInt32();
            break;
          }
          case 42: {
            pieces_.AddEntriesFrom(input, _repeated_pieces_codec);
            break;
          }
          case 48: {
            PitchRangeMin = input.ReadInt32();
            break;
          }
          case 56: {
            PitchRangeMax = input.ReadInt32();
            break;
          }
          case 64: {
            VolumeMbMin = input.ReadInt32();
            break;
          }
          case 72: {
            VolumeMbMax = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            soundProduction_.AddEntriesFrom(input, _repeated_soundProduction_codec);
            break;
          }
          case 90: {
            soundProductionParm1_.AddEntriesFrom(input, _repeated_soundProductionParm1_codec);
            break;
          }
          case 98: {
            soundProductionParm2_.AddEntriesFrom(input, _repeated_soundProductionParm2_codec);
            break;
          }
          case 106:
          case 104: {
            pitchChoice_.AddEntriesFrom(input, _repeated_pitchChoice_codec);
            break;
          }
          case 114: {
            pitchChoiceParm1_.AddEntriesFrom(input, _repeated_pitchChoiceParm1_codec);
            break;
          }
          case 122: {
            pitchChoiceParm2_.AddEntriesFrom(input, _repeated_pitchChoiceParm2_codec);
            break;
          }
          case 130:
          case 128: {
            tuning_.AddEntriesFrom(input, _repeated_tuning_codec);
            break;
          }
          case 138: {
            tuningParm_.AddEntriesFrom(input, _repeated_tuningParm_codec);
            break;
          }
          case 146: {
            registers_.AddEntriesFrom(input, _repeated_registers_codec);
            break;
          }
          case 154: {
            Description = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (flags_ == null) {
              Flags = new global::ItemdefInstrument.InstrumentFlags();
            }
            input.ReadMessage(Flags);
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
          case 24: {
            Value = input.ReadInt32();
            break;
          }
          case 32: {
            MaterialSize = input.ReadInt32();
            break;
          }
          case 42: {
            pieces_.AddEntriesFrom(ref input, _repeated_pieces_codec);
            break;
          }
          case 48: {
            PitchRangeMin = input.ReadInt32();
            break;
          }
          case 56: {
            PitchRangeMax = input.ReadInt32();
            break;
          }
          case 64: {
            VolumeMbMin = input.ReadInt32();
            break;
          }
          case 72: {
            VolumeMbMax = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            soundProduction_.AddEntriesFrom(ref input, _repeated_soundProduction_codec);
            break;
          }
          case 90: {
            soundProductionParm1_.AddEntriesFrom(ref input, _repeated_soundProductionParm1_codec);
            break;
          }
          case 98: {
            soundProductionParm2_.AddEntriesFrom(ref input, _repeated_soundProductionParm2_codec);
            break;
          }
          case 106:
          case 104: {
            pitchChoice_.AddEntriesFrom(ref input, _repeated_pitchChoice_codec);
            break;
          }
          case 114: {
            pitchChoiceParm1_.AddEntriesFrom(ref input, _repeated_pitchChoiceParm1_codec);
            break;
          }
          case 122: {
            pitchChoiceParm2_.AddEntriesFrom(ref input, _repeated_pitchChoiceParm2_codec);
            break;
          }
          case 130:
          case 128: {
            tuning_.AddEntriesFrom(ref input, _repeated_tuning_codec);
            break;
          }
          case 138: {
            tuningParm_.AddEntriesFrom(ref input, _repeated_tuningParm_codec);
            break;
          }
          case 146: {
            registers_.AddEntriesFrom(ref input, _repeated_registers_codec);
            break;
          }
          case 154: {
            Description = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
